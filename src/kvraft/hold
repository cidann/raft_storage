Test: one client (3A) ... 
                                                                                                
... Passed --  15.5  5   700  133                                                                                     
Test: many clients (3A) ...                                                                                      
... Passed --  16.9  5  1349  670                                                                   
Test: unreliable net, many clients (3A) ...                                     
... Passed --  17.5  5  1875  595         
Test: concurrent append to same key, unreliable (3A) ...                
... Passed --   2.5  3   127   52                                       
Test: progress in majority (3A) ...             
... Passed --   0.7  5    66    2              
Test: no progress in minority (3A) ...       
	... Passed --   1.3  5   116    3          
Test: completion after heal (3A) ...           
... Passed --   1.1  5    51    3           
Test: partitions, one client (3A) ...        
... Passed --  22.7  5  1795  105             
Test: partitions, many clients (3A) ...   
... Passed --  23.6  5  2116  467        
Test: restarts, one client (3A) ...    
... Passed --  20.1  5 17820  134     
Test: restarts, many clients (3A) ...  
... Passed --  21.6  5 86101  670                                  
Test: unreliable net, restarts, many clients (3A) ...             
... Passed --  21.7  5  2782  568                             
Test: restarts, partitions, many clients (3A) ...           
	2023/10/20 03:54:27 get wrong value, key 4, wanted:   
, got                                                        
	x 4 0 yx 4 1 yx 4 2 yx 4 3 yx 4 4 yx 4 5 yx 4 6 yx 4 7 yx 4 8 yx 4 9 yx 4 10 yx 4 11 yx 4 12 yx 4 13 yx 4 14 y   
exit status 1                                                                                                           FAIL    dsys/kvraft     185.799s                                                          


/*
package kvraft

import (
	"dsys/labgob"
	"dsys/labrpc"
	"log"
	"dsys/raft"
	"sync"
	"sync/atomic"
	"time"
)

const Debug = 0

func DPrintf(format string, a ...interface{}) (n int, err error) {
	if Debug > 0 {
		log.Printf(format, a...)
	}
	return
}


type Op struct {
	// Your definitions here.
	// Field names must start with capital letters,
	// otherwise RPC will break.
	Serial string
	Type int
	Key string
	Value string
	Committed bool
	RequestID int
}

type KVServer struct {
	mu      sync.Mutex
	me      int
	rf      *raft.Raft
	applyCh chan raft.ApplyMsg
	dead    int32 // set by Kill()

	maxraftstate int // snapshot if log grows this big

	// Your definitions here.
	store map[string]string
	applied map[string]bool

	readReady bool
	currentTerm int
}


func (kv *KVServer) Get(args *GetArgs, reply *GetReply) {
	// Your code here.
	kv.mu.Lock()
	DPrintf("[%d] Read received\n",kv.me)
	defer kv.mu.Unlock()
	if term,isLeader:=kv.rf.GetState();!isLeader{
		DPrintf("[%d] defer not leader term %d\n",kv.me,term)
		reply.Ok=false
	} else{
		op:=&Op{
			args.Serial,
			0,
			args.Key,
			"",
			false,
			kv.me,
		}
		kv.rf.TryRead(op)
		DPrintf("[%d] This is read",kv.me)
		kv.mu.Unlock()

		sendTime:=raft.GetSendTime()
		electionTime:=raft.GetMaxEletionTime()
		timeOut:=time.After(electionTime)
		wait:=true
		for i:=0;wait;i++{
			select{
			case <-time.After(sendTime):
				if op.Committed{
					reply.Ok=true
					wait=false
				}
			case <-timeOut:
				reply.Ok=false
				wait=false
			}
			DPrintf("%d\n",i)
		}

		kv.mu.Lock()
		reply.Value=kv.store[args.Key]
		DPrintf("[%d] This is read done",kv.me)
	}
	return
}

func (kv *KVServer) PutAppend(args *PutAppendArgs, reply *PutAppendReply) {

	DPrintf("Is reply gotten for putAppend there is notthing after this this is in server")
	// Your code here.
	kv.mu.Lock()
	DPrintf("[%d] Write received\n",kv.me)
	defer kv.mu.Unlock()
	var action int
	if args.Op=="Put"{
		action=1
	} else if args.Op=="Append"{
		action=2
	}
	if term,isLeader:=kv.rf.GetState();!isLeader{
		DPrintf("[%d] defer not leader term %d\n",kv.me,term)
		reply.Ok=false
	} else{
		op:=&Op{
			args.Serial,
			action,
			args.Key,
			args.Value,
			false,
			kv.me,
		}
		kv.rf.Start(op)
		DPrintf("[%d] This is write",kv.me)
		kv.mu.Unlock()

		sendTime:=raft.GetSendTime()
		electionTime:=raft.GetMaxEletionTime()
		timeOut:=time.After(electionTime)
		wait:=true
		for i:=0;wait;i++{
			select{
			case <-time.After(sendTime):
				if op.Committed{
					reply.Ok=true
					wait=false
					DPrintf("Stop waiting Stop waitingStop waitingStop waitingStop waitingStop waitingStop waiting")
				}
			case <-timeOut:
				reply.Ok=false
				wait=false
			}
			DPrintf("%d\n",i)
		}

		kv.mu.Lock()
		DPrintf("[%d] This is write done",kv.me)
	}
	return
}

//
// the tester calls Kill() when a KVServer instance won't
// be needed again. for your convenience, we supply
// code to set rf.dead (without needing a lock),
// and a killed() method to test rf.dead in
// long-running loops. you can also add your own
// code to Kill(). you're not required to do anything
// about this, but it may be convenient (for example)
// to suppress debug output from a Kill()ed instance.
//
func (kv *KVServer) Kill() {
	atomic.StoreInt32(&kv.dead, 1)
	kv.rf.Kill()
	// Your code here, if desired.
}

func (kv *KVServer) killed() bool {
	z := atomic.LoadInt32(&kv.dead)
	return z == 1
}

//
// servers[] contains the ports of the set of
// servers that will cooperate via Raft to
// form the fault-tolerant key/value service.
// me is the index of the current server in servers[].
// the k/v server should store snapshots through the underlying Raft
// implementation, which should call persister.SaveStateAndSnapshot() to
// atomically save the Raft state along with the snapshot.
// the k/v server should snapshot when Raft's saved state exceeds maxraftstate bytes,
// in order to allow Raft to garbage-collect its log. if maxraftstate is -1,
// you don't need to snapshot.
// StartKVServer() must return quickly, so it should start goroutines
// for any long-running work.
//
func StartKVServer(servers []*labrpc.ClientEnd, me int, persister *raft.Persister, maxraftstate int) *KVServer {
	// call labgob.Register on structures you want
	// Go's RPC library to marshall/unmarshall.
	labgob.Register(&Op{})

	kv := new(KVServer)
	kv.me = me
	kv.maxraftstate = maxraftstate

	// You may need initialization code here.

	kv.applyCh = make(chan raft.ApplyMsg)
	kv.rf = raft.Make(servers, me, persister, kv.applyCh)

	// You may need initialization code here.
	kv.store=map[string]string{}
	kv.applied=map[string]bool{}
	go kv.ProcessCommits()
	return kv
}

func (kv *KVServer)ProcessCommits(){
	kv.mu.Lock()
	for !kv.killed(){
		kv.mu.Unlock()
		commit:=<-kv.applyCh
		command:=commit.Command.(*Op)
		DPrintf("[%d] commited command %v:(%v)/(%v) Serial[%s]\n",kv.me,command.Type,command.Key,command.Value,command.Serial)
		kv.mu.Lock()
		if !kv.applied[command.Serial]{
			if command.Type==1{
				kv.store[command.Key]=command.Value
			} else if command.Type==2{
				kv.store[command.Key]+=command.Value
			}
			DPrintf("------------------Applied\n")
			kv.applied[command.Serial]=true
		} else {
			DPrintf("------------------Not Applied\n")
		}
		command.Committed=true
	}
	kv.mu.Unlock()
}
*/